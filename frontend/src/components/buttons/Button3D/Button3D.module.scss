@use "utils/scss/subColors";
@use "utils/scss/colors";
@use "utils/scss/variables" as values;

/**
  * * Миксин для покраски кнопок 
  * ! Отсутствие класса означает окрас по умолчанию
*/

@mixin colorBackground($number) {
  @each $class, $color in $colors {
    &.#{$class} {
      background-color: nth($color, $number);
    }
  }
}

/**
  * * Карта цветов имеющая следующий формат: 
  * * Ключ - название класса, значение - список из 3-х цветов
  * * Порядок цветов в списке важен:
  * * Аргумент 1 - покраска лицевой стороны кнопки
  * * Аргумент 2 - покраска боковой стороны кнопки
  * * Аргумент 3 - покраска блеска на лицевой стороне кнопки
*/

$colors: (
  "yellow": (
    var(--main-yellow),
    var(--sub-yellow),
    var(--light-yellow)
  ),
  "green": (
    var(--main-green),
    var(--sub-green),
    var(--light-green)
  )
);

/**
  * * $padding-tb-stand - значение для padding-top и padding-bottom для stand
  * * $bottom-stand3D - высота кнопки
  * * active-vertical-shift - сдвиг кнопки при нажатии (клике) на неё
  * * shadow-y - тень по оси Y
  * ! Все значения должна быть положительными (>= 0)
*/

$padding-tb-stand: 20px;
$bottom-stand3D: 10px;
$active-vertical-shift: 10px;
$shadow-y: 8px;

.container {
  position: relative;
  z-index: 0;
  width: 100%;

  .stand {
    position: relative;
    display: flex;
    flex-direction: column;
    text-align: center;
    bottom: 0;
    padding: $padding-tb-stand 60px;
    background-color: var(--main-color);
    border-radius: values.$main_border_radius;
    border: values.$main_border;
    transition: bottom 0.1s ease;

    @include colorBackground(1);

    .shine {
      position: absolute;
      height: 2px;
      top: 2px;
      left: 3px;
      right: 3px;
      border-radius: 2px;

      @include colorBackground(3);
    }
  }

  .stand3D {
    position: absolute;
    left: 0;
    bottom: calc($bottom-stand3D * -1);
    width: 100%;
    height: 100%;
    background-color: var(--main-shadow-color);
    box-shadow: 0 $shadow-y var(--main-shadow-color);
    border-radius: values.$main_border_radius;
    border: values.$main_border;
    transition: box-shadow 0.1s ease-out;

    @include colorBackground(2);
  }

  &:hover {
    --multiplier: 0.3;

    > .stand {
      bottom: calc(-1 * $bottom-stand3D * var(--multiplier));
      transition: bottom 0.1s ease;
    }

    > .stand3D {
      box-shadow: 0 calc($shadow-y - $bottom-stand3D * var(--multiplier)) var(--main-shadow-color);
      transition: box-shadow 0.1s ease;
    }
  }

  &.activeButton {
    margin-bottom: $active-vertical-shift;
    transition: margin-bottom 0.1s linear;

    > .stand {
      bottom: calc(-1 * $active-vertical-shift - $bottom-stand3D);
      padding-top: calc($padding-tb-stand - $active-vertical-shift / 2);
      padding-bottom: calc($padding-tb-stand - $active-vertical-shift / 2);
      transition:
        background-color 0.1s ease-out,
        bottom 0.1s ease-out,
        padding 0.1s linear;

      @include colorBackground(2);

      .shine {
        display: none;
      }
    }

    > .stand3D {
      bottom: 0;
      top: $active-vertical-shift;
      background-color: var(--sub-color);
      box-shadow: none;
      transition:
        bottom 0.1s ease-out,
        box-shadow 0.1s ease-out;
    }
  }
}
